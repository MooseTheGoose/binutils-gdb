#ifndef OPCODE_MOS65XX_H
#define OPCODE_MOS65XX_H

#include <stdint.h>

#define MOS65XX_ADDRMODE_IND_IDX 		0
#define MOS65XX_ADDRMODE_STK_REL 		1
#define MOS65XX_ADDRMODE_PGE 			2
#define MOS65XX_ADDRMODE_IND_LNG 		3
#define MOS65XX_ADDRMODE_IMM 			4
#define MOS65XX_ADDRMODE_ABS 			5
#define MOS65XX_ADDRMODE_LNG 			6
#define MOS65XX_ADDRMODE_IND_IDY 		7
#define MOS65XX_ADDRMODE_IND 			8
#define MOS65XX_ADDRMODE_STK_IND_IDY 		9
#define MOS65XX_ADDRMODE_IDX 			10
#define MOS65XX_ADDRMODE_IND_LNG_IDY 		11
#define MOS65XX_ADDRMODE_ABS_IDY 		12
#define MOS65XX_ADDRMODE_ABS_IDX 		13
#define MOS65XX_ADDRMODE_ABS_LNG_IDX 		14
#define MOS65XX_ADDRMODE_IDY 			15
#define MOS65XX_ADDRMODE_ACC 			16
#define MOS65XX_ADDRMODE_BLK 			17
#define MOS65XX_ADDRMODE_IMPLIED 		18
#define MOS65XX_ADDRMODE_ABS_IND 		19
#define MOS65XX_ADDRMODE_ABS_IND_IDX 		20
#define MOS65XX_ADDRMODE_ABS_IND_LNG 		21
#define MOS65XX_ADDRMODE_PCREL 			22
#define MOS65XX_ADDRMODE_PCREL16 		23
#define MOS65XX_ADDRMODE_MAX 			24
#define MOS65XX_ADDRMODE_INVALID 		0xff
#define MOS65XX_ADDRMODE_MAX_VALUE 		(+0xffffff)
#define MOS65XX_ADDRMODE_MIN_VALUE 		(-0x800000)
#define MOS65XX_MODEFLAG(x) 			(1 << (x))

#define MOS65XX_OPCLASS_ALUMEM 			0
#define MOS65XX_OPCLASS_CPXY 			1
#define MOS65XX_OPCLASS_BITOPS 			2
#define MOS65XX_OPCLASS_BRANCH 			3
#define MOS65XX_OPCLASS_IDX 			4
#define MOS65XX_OPCLASS_IDY 			5
#define MOS65XX_OPCLASS_IMPLIED 		6
#define MOS65XX_OPCLASS_JUMP 			7
#define MOS65XX_OPCLASS_JSR 			8
#define MOS65XX_OPCLASS_BLK 			9
#define MOS65XX_OPCLASS_PEA 			10
#define MOS65XX_OPCLASS_PEI 			11
#define MOS65XX_OPCLASS_PER 			12
#define MOS65XX_OPCLASS_IMM 			13
#define MOS65XX_OPCLASS_STA 			14
#define MOS65XX_OPCLASS_STX 			15
#define MOS65XX_OPCLASS_STY 			16
#define MOS65XX_OPCLASS_STZ 			17
#define MOS65XX_OPCLASS_TB 			18
#define MOS65XX_OPCLASS_BRANCHLONG 		19
#define MOS65XX_OPCLASS_MAX 			20

/*
 * Do not take changing these bases lightly.
 * These bases are specifically computed to decrease
 * the special cases the assembler needs to deal with
 * when defaulting to using (base + addend) to compute
 * the final opcode. Change at your own risk.
 *
 * Note: The combination of opclass and base is unique
 *       across every instruction. Also, opcodes listed
 *       here are sorted by base.
 */

/* Arithmetic instructions */
#define MOS65XX_ORA_BASE 			0x01
#define MOS65XX_AND_BASE 			0x21
#define MOS65XX_EOR_BASE 			0x41
#define MOS65XX_ADC_BASE 			0x61
#define MOS65XX_LDA_BASE 			0xa1
#define MOS65XX_CMP_BASE 			0xc1
#define MOS65XX_SBC_BASE 			0xe1

/* STA */
#define MOS65XX_STA_BASE 			0x81

/* Bitops instructions */
#define MOS65XX_ASL_BASE 			0x02
#define MOS65XX_ROL_BASE 			0x22
#define MOS65XX_LSR_BASE 			0x42
#define MOS65XX_ROR_BASE 			0x62
#define MOS65XX_DEC_BASE 			0xc2
#define MOS65XX_INC_BASE 			0xe2

/* Branch instructions */
#define MOS65XX_BPL_BASE 			0x04
#define MOS65XX_BMI_BASE 			0x24
#define MOS65XX_BVC_BASE 			0x44
#define MOS65XX_BVS_BASE 			0x64
#define MOS65XX_BRA_BASE 			0x74
#define MOS65XX_BCC_BASE 			0x84
#define MOS65XX_BCS_BASE 			0xa4
#define MOS65XX_BNE_BASE 			0xc4
#define MOS65XX_BEQ_BASE 			0xe4

/* Branch long */
#define MOS65XX_BRL_BASE 			0x76

/* IDX instructions */
#define MOS65XX_BIT_BASE 			0x20
#define MOS65XX_LDY_BASE 			0xa0

/* Implied instructions */
#define MOS65XX_BRK_BASE 			0x00
#define MOS65XX_PHP_BASE 			0x08
#define MOS65XX_PHD_BASE 			0x0b
#define MOS65XX_CLC_BASE 			0x18
#define MOS65XX_TCS_BASE 			0x1b
#define MOS65XX_PLP_BASE 			0x28
#define MOS65XX_PLD_BASE 			0x2b
#define MOS65XX_SEC_BASE 			0x38
#define MOS65XX_TSC_BASE 			0x3b
#define MOS65XX_RTI_BASE 			0x40
#define MOS65XX_WDM_BASE 			0x42
#define MOS65XX_PHA_BASE 			0x48
#define MOS65XX_PHK_BASE 			0x4b
#define MOS65XX_CLI_BASE 			0x58
#define MOS65XX_PHY_BASE 			0x5a
#define MOS65XX_TCD_BASE 			0x5b
#define MOS65XX_RTS_BASE 			0x60
#define MOS65XX_PLA_BASE 			0x68
#define MOS65XX_RTL_BASE 			0x6b
#define MOS65XX_SEI_BASE 			0x78
#define MOS65XX_PLY_BASE 			0x7a
#define MOS65XX_TDC_BASE 			0x7b
#define MOS65XX_DEY_BASE 			0x88
#define MOS65XX_TXA_BASE 			0x8a
#define MOS65XX_PHB_BASE 			0x8b
#define MOS65XX_TYA_BASE 			0x98
#define MOS65XX_TXS_BASE 			0x9a
#define MOS65XX_TXY_BASE 			0x9b
#define MOS65XX_TAY_BASE 			0xa8
#define MOS65XX_TAX_BASE 			0xaa
#define MOS65XX_PLB_BASE 			0xab
#define MOS65XX_CLV_BASE 			0xb8
#define MOS65XX_TSX_BASE 			0xba
#define MOS65XX_TYX_BASE 			0xbb
#define MOS65XX_INY_BASE 			0xc8
#define MOS65XX_DEX_BASE 			0xca
#define MOS65XX_WAI_BASE 			0xcb
#define MOS65XX_CLD_BASE 			0xd8
#define MOS65XX_PHX_BASE 			0xda
#define MOS65XX_STP_BASE 			0xdb
#define MOS65XX_SEP_BASE 			0xe2
#define MOS65XX_INX_BASE 			0xe8
#define MOS65XX_NOP_BASE 			0xea
#define MOS65XX_XBA_BASE 			0xeb
#define MOS65XX_SED_BASE 			0xf8
#define MOS65XX_PLX_BASE 			0xfa
#define MOS65XX_XCE_BASE 			0xfb


/* IMM instructions */
#define MOS65XX_COP_BASE 			0x02
#define MOS65XX_REP_BASE 			0xc2

/* CPXY instructions */
#define MOS65XX_CPY_BASE 			0xc0
#define MOS65XX_CPX_BASE 			0xe0

/* JMP */
#define MOS65XX_JMP_BASE 			0x40

/* JSR */
#define MOS65XX_JSR_BASE 			0x14

/* IDY Instructions */
#define MOS65XX_LDX_BASE 			0xa2

/* BLK instructions */
#define MOS65XX_MVP_BASE 			0x44
#define MOS65XX_MVN_BASE 			0x54

/* PEA */
#define MOS65XX_PEA_BASE 			0xe8

/* PEI */
#define MOS65XX_PEI_BASE 			0xc8

/* PER */
#define MOS65XX_PER_BASE 			0x56


/* STX */
#define MOS65XX_STX_BASE 			0x82

/* STY */
#define MOS65XX_STY_BASE 			0x80

/* STZ */
#define MOS65XX_STZ_BASE 			0x60


/* TB Instructions */
#define MOS65XX_TSB_BASE 			0x00
#define MOS65XX_TRB_BASE 			0x10


#define MOS65XX_ADC_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_AND_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_ASL_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_BCC_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BCS_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BEQ_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BIT_CLASS 	MOS65XX_OPCLASS_IDX
#define MOS65XX_BMI_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BNE_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BPL_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BRA_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BRK_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_BRL_CLASS 	MOS65XX_OPCLASS_BRANCHLONG
#define MOS65XX_BVC_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_BVS_CLASS 	MOS65XX_OPCLASS_BRANCH
#define MOS65XX_CLC_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_CLD_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_CLI_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_CLV_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_CMP_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_COP_CLASS 	MOS65XX_OPCLASS_IMM
#define MOS65XX_CPX_CLASS 	MOS65XX_OPCLASS_CPXY
#define MOS65XX_CPY_CLASS 	MOS65XX_OPCLASS_CPXY
#define MOS65XX_DEC_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_DEX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_DEY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_EOR_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_INC_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_INX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_INY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_JMP_CLASS 	MOS65XX_OPCLASS_JUMP
#define MOS65XX_JSR_CLASS 	MOS65XX_OPCLASS_JSR
#define MOS65XX_LDA_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_LDX_CLASS 	MOS65XX_OPCLASS_IDY
#define MOS65XX_LDY_CLASS 	MOS65XX_OPCLASS_IDX
#define MOS65XX_LSR_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_MVN_CLASS 	MOS65XX_OPCLASS_BLK
#define MOS65XX_MVP_CLASS 	MOS65XX_OPCLASS_BLK
#define MOS65XX_NOP_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_ORA_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_PEA_CLASS 	MOS65XX_OPCLASS_PEA
#define MOS65XX_PEI_CLASS 	MOS65XX_OPCLASS_PEI
#define MOS65XX_PER_CLASS 	MOS65XX_OPCLASS_PER
#define MOS65XX_PHA_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHB_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHD_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHD_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHK_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHP_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PHY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLA_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLB_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLD_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLP_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_PLY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_REP_CLASS 	MOS65XX_OPCLASS_IMM
#define MOS65XX_ROL_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_ROR_CLASS 	MOS65XX_OPCLASS_BITOPS
#define MOS65XX_RTI_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_RTL_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_RTS_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_SBC_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_SEC_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_SED_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_SEI_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_SEP_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_STA_CLASS 	MOS65XX_OPCLASS_ALUMEM
#define MOS65XX_STP_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_STX_CLASS 	MOS65XX_OPCLASS_STX
#define MOS65XX_STY_CLASS 	MOS65XX_OPCLASS_STY
#define MOS65XX_STZ_CLASS 	MOS65XX_OPCLASS_STZ
#define MOS65XX_TAX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TAY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TCD_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TCS_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TDC_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TRB_CLASS 	MOS65XX_OPCLASS_TB
#define MOS65XX_TSB_CLASS 	MOS65XX_OPCLASS_TB
#define MOS65XX_TSC_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TSX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TXA_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TXS_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TXY_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TYA_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_TYX_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_WAI_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_WDM_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_XBA_CLASS 	MOS65XX_OPCLASS_IMPLIED
#define MOS65XX_XCE_CLASS 	MOS65XX_OPCLASS_IMPLIED

#define MOS65XX_SIZEOF_BYTE 	1
#define MOS65XX_SIZEOF_WORD 	2
#define MOS65XX_SIZEOF_LONG 	3

#define MOS65XX_FORCE_SIZE_SUFFIX 	':'
#define MOS65XX_IMM_PREFIX 		'#'
#define MOS65XX_BYTE_SUFFIX 		'B'
#define MOS65XX_WORD_SUFFIX 		'W'
#define MOS65XX_LONG_SUFFIX 		'L'

struct mos65xx_op 
{
  const char *name;
  uint32_t modeflags;
  int base;
  int opclass;
};

struct mos65xx_arg_widths
{
  int width1;
  int width2;
};

extern const uint8_t mos65xx_addrmode_addends[MOS65XX_ADDRMODE_MAX];
struct mos65xx_op *mos65xx_opcode_lookup(const char *nmemonic, struct mos65xx_op *out_opcode);
void mos65xx_addrmode_widths(int addrmode, struct mos65xx_arg_widths *widths);

#endif
